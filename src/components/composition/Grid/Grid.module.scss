@use 'sass:math';
@use '../../../styles/variables/spacing';
@use '../../../styles/variables/breakpoint';

.grid {
  display: flex;
  margin: (-#{math.div(spacing.$vertical, 2)})
    (-#{math.div(spacing.$horizontal, 2)});

  // Wrap
  &--wrap {
    flex-wrap: wrap;
  }

  // Inset
  &--inset {
    margin: 0;
    padding: math.div(spacing.$vertical, 2) math.div(spacing.$horizontal, 2);
  }

  &--inset-fluid {
    padding: spacing.$vertical-fluid-sm 0;
  }

  &--inset-vertical-fluid {
    padding: spacing.$vertical-fluid-sm 0;
  }

  // Direction
  &--row {
    flex-direction: row;

    &-reverse {
      flex-direction: row-reverse;
    }
  }

  &--column {
    flex-direction: column;

    &-reverse {
      flex-direction: column-reverse;
    }
  }

  // Justify
  &--justify {
    &-flex-start {
      justify-content: flex-start;
    }

    &-flex-end {
      justify-content: flex-end;
    }

    &-center {
      justify-content: center;
    }

    &-space-between {
      justify-content: space-between;
    }

    &-space-around {
      justify-content: space-around;
    }

    &-space-evenly {
      justify-content: space-evenly;
    }
  }

  // Align
  &--align {
    &-stretch {
      align-items: stretch;
    }

    &-flex-start {
      align-items: flex-start;
    }

    &-flex-end {
      align-items: flex-end;
    }

    &-center {
      align-items: center;
    }

    &-baseline {
      align-items: baseline;
    }
  }

  &--full-width {
    width: 100%;
  }

  &__item {
    flex: 0 0 auto;
    min-width: 0;
    padding: (math.div(spacing.$vertical, 2)) (math.div(spacing.$horizontal, 2));

    &--grow {
      flex-grow: 1;
    }

    &--shrink {
      flex-shrink: 1;
    }

    // Align
    &--align {
      &-stretch {
        align-self: stretch;
      }

      &-flex-start {
        align-self: flex-start;
      }

      &-flex-end {
        align-self: flex-end;
      }

      &-center {
        align-self: center;
      }

      &-baseline {
        align-self: baseline;
      }
    }

    &--flex {
      display: flex;
    }

    @each $bp-key, $bp-value in breakpoint.$map {
      @media screen and (min-width: $bp-value) {
        &--#{$bp-key}-auto {
          width: auto;
        }

        @for $i from 1 through 12 {
          &--#{$bp-key}-#{$i} {
            width: percentage(math.div($i, 12));
          }
        }
      }
    }

    @each $bp-key, $bp-value in breakpoint.$map {
      @media screen and (min-width: $bp-value) {
        @for $i from 1 through 12 {
          &--order-#{$bp-key}-#{$i} {
            order: $i;
          }
        }
      }
    }
  }

  // Spacing
  &--spacing {
    &-xs {
      margin: (-#{math.div(spacing.$vertical-xs, 2)})
        (-#{math.div(spacing.$horizontal-xs, 2)});

      > .grid__item {
        padding: (math.div(spacing.$vertical-xs, 2))
          (math.div(spacing.$horizontal-xs, 2));
      }
    }

    &-sm {
      margin: (-#{math.div(spacing.$vertical-sm, 2)})
        (-#{math.div(spacing.$horizontal-sm, 2)});

      > .grid__item {
        padding: (math.div(spacing.$vertical-sm, 2))
          (math.div(spacing.$horizontal-sm, 2));
      }
    }

    &-lg {
      margin: (-#{math.div(spacing.$vertical-lg, 2)})
        (-#{math.div(spacing.$horizontal-lg, 2)});

      > .grid__item {
        padding: (math.div(spacing.$vertical-lg, 2))
          (math.div(spacing.$horizontal-lg, 2));
      }
    }

    &-xl {
      margin: (-#{math.div(spacing.$vertical-xl, 2)})
        (-#{math.div(spacing.$horizontal-xl, 2)});

      > .grid__item {
        padding: (math.div(spacing.$vertical-xl, 2))
          (math.div(spacing.$horizontal-xl, 2));
      }
    }

    &-none {
      margin: 0;

      > .grid__item {
        padding: 0;
      }
    }
  }
}
